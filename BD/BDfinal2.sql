-- MySQL Script generated by MySQL Workbench
-- Tue Aug 25 18:59:40 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema skillexBD
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema skillexBD
-- -----------------------------------------------------
CREATE database IF NOT EXISTS `skillexBD` DEFAULT CHARACTER SET utf8 ;
USE `skillexBD` ;

-- -----------------------------------------------------
-- Table `skillexBD`.`tipoUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`tipoUsuario` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`tipoUsuario` (
  `idTipoUsuario` INT NOT NULL primary key AUTO_INCREMENT,
  `nivelAcceso` INT NOT NULL,
  `descripcion` VARCHAR(45) NOT NULL
);


-- -----------------------------------------------------
-- Table `skillexBD`.`inventario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`inventario` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`inventario` (
  `id_inventario` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  `nombre_empresa` VARCHAR(45) NOT NULL,
  `total_productos` VARCHAR(45) NOT NULL
);


-- -----------------------------------------------------
-- Table `skillexBD`.`Usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`Usuario` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`Usuario` (
  `idUsuarios` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  `nombreUsuario` VARCHAR(45) NOT NULL,
  `apellidoUsuario` VARCHAR(45) NOT NULL,
  `emailUsuario` VARCHAR(45) NOT NULL,
  `passwordUsuario` VARCHAR(45) NOT NULL,
  `tienda` VARCHAR(45) NOT NULL,
  `creacion_usuario` DATE NULL,
  `fecha_login` VARCHAR(45) NULL,
  `turnos_laborales` VARCHAR(45) NULL,
  `cedula_ciudadania` varchar(45) NULL,
  `tipoUsuario_idTipoUsuario` INT NOT NULL,
  inventario_idInventario INT NOT NULL,
  FOREIGN KEY (tipoUsuario_idTipoUsuario) REFERENCES tipoUsuario(idTipoUsuario),
  FOREIGN KEY (inventario_idInventario) REFERENCES inventario(id_inventario)
  
);


-- -----------------------------------------------------
-- Table `skillexBD`.`detallePedido`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`detallePedido` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`detallePedido` (
  `iddetallePedido` INT NOT NULL AUTO_INCREMENT,
  `valorApagar` int NULL,
  `producto` VARCHAR(45) NULL,
  `cantidadProducto` INT NULL,
  fecha_pedido date null,
  PRIMARY KEY (`iddetallePedido`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `skillexBD`.`pedidos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`pedidos` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`pedidos` (
  `idPedidos` INT NOT NULL AUTO_INCREMENT,
  `estadoPedido` VARCHAR(45) NOT NULL,
  `mesa` INT NOT NULL,
  `numeroPedido` INT NOT NULL,
  `detallePedido_iddetallePedido` INT NOT NULL,
  `Usuario_idUsuarios` INT NOT NULL,
  estado_pedido_ID int NOT NULL,
  PRIMARY KEY (`idPedidos`),
  FOREIGN KEY (detallePedido_iddetallePedido) REFERENCES detallePedido(iddetallePedido),
  FOREIGN KEY (Usuario_idUsuarios) REFERENCES Usuario(idUsuarios),
  FOREIGN KEY (estado_pedido_ID) REFERENCES estado_pedido(id_Estado_pedido)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`Pedidos_has_Pedidos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`Pedidos_has_Pedidos` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`Pedidos_has_Pedidos` (
  `Pedidos_idUsuarios` INT NOT NULL,
  `Pedidos_idPedidos` INT NOT NULL,
  FOREIGN KEY (Pedidos_idUsuarios) REFERENCES Usuario (idUsuarios),
  FOREIGN KEY (Pedidos_idPedidos) REFERENCES pedidos (idPedidos)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`estado_pedido`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`estado_pedido` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`estado_pedido` (
  `id_Estado_pedido` INT NOT NULL AUTO_INCREMENT,
  `State_id` INT NULL,
  `descripcion` VARCHAR(45) NULL,
  PRIMARY KEY (`id_Estado_pedido`)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`detalle_evento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`detalle_evento` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`detalle_evento` (
  `id_detalle_evento` INT NOT NULL AUTO_INCREMENT,
  `tipo_evento` VARCHAR(45) NOT NULL,
  `servicio_ofrecido` VARCHAR(45) NOT NULL,
  nombre_imagen varchar(300),
  `imagen_evento` VARCHAR(300) NULL,
  PRIMARY KEY (`id_detalle_evento`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `skillexBD`.`Eventos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`Eventos` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`Eventos` (
  `idEventos` INT NOT NULL AUTO_INCREMENT,
  `nombre_evento` VARCHAR(45) NOT NULL,
  `autor_evento` VARCHAR(45) NOT NULL,
  `Usuario_idUsuarios` INT NOT NULL,
  `detalle_evento_id_detalle_evento` INT NOT NULL,
  fecha_evento DATETIME,
  PRIMARY KEY (`idEventos`),
  FOREIGN KEY(Usuario_idUsuarios) REFERENCES Usuario (idUsuarios),
  FOREIGN KEY(detalle_evento_id_detalle_evento) REFERENCES detalle_evento (id_detalle_evento)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`cancion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`cancion` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`cancion` (
  `id_cancion` INT NOT NULL AUTO_INCREMENT,
  `nombre_cancion` VARCHAR(45) NULL,
  `autor` VARCHAR(45) NULL,
  `duracion` VARCHAR(45) NULL,
  album_musical_id int NOT NULL,
  PRIMARY KEY (`id_cancion`),
  FOREIGN KEY (album_musical_id) REFERENCES album_musical(id_album_musical)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`genero`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`genero` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`genero` (
  `id_genero` INT NOT NULL,
  `descripcion` VARCHAR(300) NULL,
  PRIMARY KEY (`id_genero`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `skillexBD`.`album_musical`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`album_musical` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`album_musical` (
  `id_album_musical` INT NOT NULL AUTO_INCREMENT,
  `nombre_album` VARCHAR(45) NULL,
  `autor_album` VARCHAR(45) NULL,
  `Usuario_idUsuarios` INT NOT NULL,
  `genero_id_genero` INT NOT NULL,
  nombre_imagen varchar(100),
  url_imagen varchar(300),
  activo int,
  PRIMARY KEY (`id_album_musical`),
  FOREIGN KEY (Usuario_idUsuarios) REFERENCES Usuario (idUsuarios),
  FOREIGN KEY (genero_id_genero) REFERENCES genero (id_genero)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`categoria_producto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`categoria_producto` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`categoria_producto` (
  `id_categoria_producto` INT NOT NULL AUTO_INCREMENT,
  `tipo_categoria` VARCHAR(45) NULL,
  PRIMARY KEY (`id_categoria_producto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `skillexBD`.`productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`productos` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`productos` (
  `id_productos` INT NOT NULL AUTO_INCREMENT,
  `nombre_producto` VARCHAR(45) NULL,
  nombre_producto_in varchar(45),
  `codigo_producto` VARCHAR(45) NULL,
  `estado_producto` VARCHAR(45) NULL,
  `cantidad_producto` INT NULL,
  `fecha_ingreso` DATE NULL,
  `inventario_id_inventario` INT NOT NULL,
  `categoria_producto_id_categoria_producto` INT NOT NULL,
  PRIMARY KEY (`id_productos`),
  FOREIGN KEY (inventario_id_inventario) REFERENCES inventario(id_inventario),
  FOREIGN KEY (categoria_producto_id_categoria_producto) REFERENCES categoria_producto(id_categoria_producto)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`detalle_productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`detalle_productos` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`detalle_productos` (
  `id_detalle_productos` INT NOT NULL AUTO_INCREMENT,
  `valor_inicial` INT NULL,
  `valor_mas_iva` INT NULL,
  `descripcion_producto` VARCHAR(300) NULL,
  descripcion_producto_in varchar(300),
  `productos_id_productos` INT NOT NULL,
  nombre_imagen varchar(300),
  url_imagen varchar(300) null,
  PRIMARY KEY (`id_detalle_productos`),
  FOREIGN KEY (productos_id_productos) REFERENCES productos (id_productos)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`proveedor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`proveedor` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`proveedor` (
  `id_proveedor` INT NOT NULL AUTO_INCREMENT,
  `contacto` VARCHAR(45) NULL,
  `nombre_proveedor` VARCHAR(45) NULL,
  PRIMARY KEY (`id_proveedor`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `skillexBD`.`proveedor_has_productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`proveedor_has_productos` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`proveedor_has_productos` (
  `proveedor_id_proveedor` INT NOT NULL,
  `productos_id_productos` INT NOT NULL,
   FOREIGN KEY(proveedor_id_proveedor) REFERENCES proveedor(id_proveedor),
   FOREIGN KEY(productos_id_productos) REFERENCES productos(id_productos)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`usuarioEvento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`usuarioEvento` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`usuarioEvento` (
  `id_usuario_Evento` INT NOT NULL AUTO_INCREMENT,
  `nombre_usuario_participacion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_usuario_Evento`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `skillexBD`.`Usuario_has_usuarioEvento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`Usuario_has_usuarioEvento` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`Usuario_has_usuarioEvento` (
  `Usuario_idUsuarios` INT NOT NULL,
  `usuarioEvento_idusuarioEvento` INT NOT NULL,
  FOREIGN KEY(Usuario_idUsuarios)REFERENCES Usuario(idUsuarios),
  FOREIGN KEY(usuarioEvento_idusuarioEvento)REFERENCES usuarioEvento(id_usuario_Evento)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`usuarioMusica`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`usuarioMusica` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`usuarioMusica` (
  `idusuarioMusica` INT NOT NULL AUTO_INCREMENT,
  `mesa_cancion` VARCHAR(45) not NULL,
  `estado` INT not null,
  PRIMARY KEY (`idusuarioMusica`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `skillexBD`.`usuarioMusica_has_Usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`usuarioMusica_has_Usuario` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`usuarioMusica_has_Usuario` (
  `usuarioMusica_idusuarioMusica` INT NOT NULL AUTO_INCREMENT,
  `Usuario_idUsuarios` INT NOT NULL,
  FOREIGN KEY (usuarioMusica_idusuarioMusica) REFERENCES usuarioMusica(idusuarioMusica),
  FOREIGN KEY (Usuario_idUsuarios) REFERENCES Usuario(idUsuarios)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`Eventos_has_usuarioEvento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`Eventos_has_usuarioEvento` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`Eventos_has_usuarioEvento` (
  `Eventos_idEventos` INT NOT NULL,
  `usuarioEvento_id_usuario_Evento` INT NOT NULL,
  FOREIGN KEY (Eventos_idEventos) REFERENCES Eventos(idEventos),
  FOREIGN KEY (usuarioEvento_id_usuario_Evento) REFERENCES usuarioEvento(id_usuario_Evento)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`cancion_has_usuarioMusica`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`cancion_has_usuarioMusica` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`cancion_has_usuarioMusica` (
  `cancion_id_cancion` INT NOT NULL,
  `usuarioMusica_idusuarioMusica` INT NOT NULL,
  FOREIGN KEY (cancion_id_cancion)REFERENCES cancion(id_cancion),
  FOREIGN KEY (usuarioMusica_idusuarioMusica)REFERENCES usuarioMusica(idusuarioMusica)
);


-- -----------------------------------------------------
-- Table `skillexBD`.`pedidos_has_productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `skillexBD`.`pedidos_has_productos` ;

CREATE TABLE IF NOT EXISTS `skillexBD`.`pedidos_has_productos` (
  `id` INT primary key auto_increment not null,
  `pedidos_idPedidos` INT NOT NULL,
  `productos_id_productos` INT NOT NULL,
	cantidad_producto_pedido INT NULL,
  FOREIGN KEY(pedidos_idPedidos) REFERENCES pedidos(idPedidos),
   FOREIGN KEY(productos_id_productos) REFERENCES productos(id_productos)
  
);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
